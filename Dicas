Claro! Aqui v√£o **dicas certeiras para mandar bem na sua prova de C**, divididas em blocos r√°pidos para facilitar:

---

### üß† **1. Entenda a l√≥gica antes da sintaxe**

* **Leia o enunciado com calma.** O que o problema pede? Entrada, sa√≠da, condi√ß√£o, la√ßo?
* Fa√ßa **rascunho no papel**: trace o fluxo (entrada ‚Üí processamento ‚Üí sa√≠da).

---

### üîÅ **2. La√ßos (`for`, `while`, `do while`)**

* Use `for` quando **souber quantas vezes** vai repetir.
* Use `while` ou `do while` quando **n√£o souber exatamente** o n√∫mero de repeti√ß√µes (ex: at√© o usu√°rio digitar 0).
* Exemplo cl√°ssico com `do while`:

```c
int opcao;
do {
    printf("1 - Continuar\n0 - Sair\n");
    scanf("%d", &opcao);
} while(opcao != 0);
```

---

### üßÆ **3. Vetores e matrizes**

* Vetores (arrays) armazenam v√°rios valores do mesmo tipo:

```c
int vet[5] = {1, 2, 3, 4, 5};
for(int i = 0; i < 5; i++) {
    printf("%d ", vet[i]);
}
```

* Para matrizes:

```c
int mat[2][3]; // 2 linhas, 3 colunas
```

---

### üß∞ **4. Fun√ß√µes**

* Use para organizar o c√≥digo.
* Exemplo:

```c
int soma(int a, int b) {
    return a + b;
}
```

* Declare antes do `main()` ou coloque o prot√≥tipo (`int soma(int, int);`).

---

### üß® **5. Cuidados com `scanf` e `%`**

* `%d` para `int`, `%f` para `float`, `%lf` para `double`, `%c` para `char`
* Sempre **use `&` no `scanf`**:

```c
scanf("%d", &numero); // n√£o esque√ßa o &
```

---

### üìõ **6. Comuns em prova**

* Verifica√ß√£o de **n√∫meros pares**: `if (n % 2 == 0)`
* Contagem de ocorr√™ncias em vetores
* Troca de elementos: use vari√°vel auxiliar!

```c
int aux = a;
a = b;
b = aux;
```

* Menu com `switch` + `do while`

---

### üîç **7. Debug na m√£o**

Se der tempo, **verifique seus la√ßos manualmente** com 2 ou 3 valores de teste. Imagine os passos um por um:

* Valor de `i`?
* Valor de `vetor[i]`?
* Entra ou n√£o no `if`?

---

### üìù **8. Antes de entregar**

‚úÖ Verifique:

* Fechou todos os `{}`?
* `main()` tem `return 0;`?
* Vari√°veis est√£o bem declaradas?
* `scanf` com `&`?

---

Se quiser, posso montar um **resumo com os comandos mais usados**, ou simular quest√µes com **resposta explicada** pra treinar agora. Quer fazer isso?
